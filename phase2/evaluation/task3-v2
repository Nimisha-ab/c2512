#include <iostream>
#include <vector>
#include <unistd.h>
#include <sys/wait.h>
#include <sys/types.h>
#include <cstring>
#include <string>
#include <thread>

using namespace std;

class Prescription {
private:
    string Prescription_id;
    int Dosage;
public:
    Prescription(string p_id, int p_dosage) : Prescription_id(p_id), Dosage(p_dosage) {}

    
    int getDosage() 
    { 
        return Dosage; 
    }
};


void calculateSum(int* dosages,int startIndex, int endIndex, int& result)
{
    int sum = 0;
    for(int i = startIndex; i < endIndex; i++)
    {
        sum += dosages[i];
    }
    result=sum;
}



void client(int read_fd, int write_fd) {
    vector<Prescription> prescriptions = {
        Prescription("01", 4), 
        Prescription("02", 5), 
        Prescription("03", 6), 
        Prescription("04", 7), 
        Prescription("05", 1)
    };

    int size = prescriptions.size();
    int dosages[100];

    for (int i = 0; i < size; i++){
        dosages[i] = prescriptions[i].getDosage();
    }

    cout << "Client sending dosages: ";
    for (int i = 0; i < size; ++i){
        cout << dosages[i] << " ";
    }
    cout << endl;

    write(read_fd, &size, sizeof(size));
    write(read_fd, dosages, sizeof(double)* size);

    int sum;
    read(write_fd, &sum, sizeof(sum));
    cout << "Client received sum from server: " << sum << endl;

    close(read_fd);
    close(write_fd);
}


void server(int read_fd, int write_fd) {
    int dosages[100];
    int size;
    int sum = 0;

    read(read_fd, &size, sizeof(size));
    read(read_fd, dosages, sizeof(int)* size);
 
    int sum1 = 0, sum2 = 0;
    int sliceSize = size / 2;

    thread thrSum1(calculateSum, dosages,0,  sliceSize, std::ref(sum1));
    thread thrSum2(calculateSum, dosages,sliceSize, 2 * sliceSize, std::ref(sum2));
   

    thrSum1.join();
    thrSum2.join();
    

    int totalSum = sum1 + sum2 ;
    write(write_fd, &totalSum, sizeof(totalSum));

   cout << "Server calculated sum: " << totalSum << endl;

    

    close(read_fd);
    close(write_fd);
}

int main() {
    int pipe_clienttoserver[2], pipe_servertoclient[2];

    if (pipe(pipe_clienttoserver) == -1 || pipe(pipe_servertoclient) == -1) {
        perror("Pipe creation failed");
        return 1;
    }
    {
        pid_t pid = fork();
        if (pid == -1) {
            perror("Fork failed");
            return 1;
        }

        if (pid == 0) {  
        close(pipe_servertoclient[1]); 
        close(pipe_clienttoserver[0]);  
        client(pipe_clienttoserver[1], pipe_servertoclient[0]);
        exit(0);
    } else {  
        close(pipe_clienttoserver[1]);
        close(pipe_servertoclient[0]);
        server(pipe_clienttoserver[0], pipe_servertoclient[1]);
        
    }
}
    return 0;
}

        
