Examples for diamond problem in inheritance:
=============================================================
These class structures represent the diamond problem,
where the `final derived class` 
inherits ambiguously 
from two intermediate classes 
that share a common base class.
=============================================================
Create one static object for final-derived class
and call all behaviours
and 
one dynamic object for final-derived class 
and call all behaviours

Define constructors and destructors for all the classes 
`Animal Classification`
- `Base Class:` Animal `{field: species, behavior: move()}`
- `Derived Class 1:` Mammal `{field: furColor, behavior: giveBirth()}`
- `Derived Class 2:` Bird `{field: wingSpan, behavior: layEggs()}`
- `Final Derived Class:` Bat `{field: echolocation, behavior: fly()}`
//task1

#include <iostream>
#include <string>

// Base Class: Animal
class Animal {
protected:
    std::string species;

public:
    Animal(const std::string& species) : species(species) {
        std::cout << "Animal constructor called." << std::endl;
    }

    ~Animal() {
        std::cout << "Animal destructor called." << std::endl;
    }

     void move() {
        std::cout << species << " is moving." << std::endl;
    }
};

// Derived Class 1: Mammal
class Mammal : virtual public Animal {
protected:
    std::string furColor;

public:
    Mammal(const std::string& species, const std::string& furColor) 
        : Animal(species), furColor(furColor) {
        std::cout << "Mammal constructor called." << std::endl;
    }

    ~Mammal() {
        std::cout << "Mammal destructor called." << std::endl;
    }

    void giveBirth() {
        std::cout << "Mammal is giving birth." << std::endl;
    }
};

// Derived Class 2: Bird
class Bird : virtual public Animal {
protected:
    double wingSpan;

public:
    Bird(const std::string& species, double wingSpan) 
        : Animal(species), wingSpan(wingSpan) {
        std::cout << "Bird constructor called." << std::endl;
    }

    ~Bird() {
        std::cout << "Bird destructor called." << std::endl;
    }

    void layEggs() {
        std::cout << "Bird is laying eggs." << std::endl;
    }
};

// Final Derived Class: Bat
class Bat : public Mammal, public Bird {
private:
    bool echolocation;

public:
    Bat(const std::string& species, const std::string& furColor, double wingSpan, bool echolocation) 
        : Animal(species), Mammal(species, furColor), Bird(species, wingSpan), echolocation(echolocation) {
        std::cout << "Bat constructor called." << std::endl;
    }

    ~Bat() {
        std::cout << "Bat destructor called." << std::endl;
    }

    void fly() {
        std::cout << "Bat is flying." << std::endl;
    }
};

int main() {
    // Static object for Bat
    Bat staticBat("Bat", "Brown", 2.5, true);
    staticBat.move();
    staticBat.giveBirth();
    staticBat.layEggs();
    staticBat.fly();

    // Dynamic object for Bat
    Bat* dynamicBat = new Bat("Bat", "Brown", 2.5, true);
    dynamicBat->move();
    dynamicBat->giveBirth();
    dynamicBat->layEggs();
    dynamicBat->fly();
    delete dynamicBat;

    return 0;
}


single inheritance using static binding:
=============================================================
Create two static objects for Both Base and Derived class
and call all behaviours
and 
one two dynamic objects for Base and Derived class 
and call all behaviours

Define constructors and destructors for all the classes 
Academic System`
- `Base Class:` Person `{field: name, behavior: introduce()}`
- `Derived Class:` Student `{field: grade, behavior: study()}`

//task2

#include <iostream>

using namespace std;

class Person {
public:
    string name;

    Person(string name) : name(name) {
        cout << "Person constructor: " << name << endl;
    }

    ~Person() {
        cout << "Person destructor: " << name << endl;
    }

    void introduce() {
        cout << "Hi, I am " << name << endl;
    }
};

class Student : public Person {
public:
    int grade;

    Student(string name, int grade) : Person(name), grade(grade) {
        cout << "Student constructor: " << name << endl;
    }

    ~Student() {
        cout << "Student destructor: " << name << endl;
    }

    void study() {
        cout << name << " is studying in grade " << grade << endl;
    }
};

int main() {
    //Static objects
    Person person1("Nimisha");
    Student student1("Bob", 10);

    person1.introduce();
    student1.introduce();
    student1.study();
    

    // Dynamic objects
    Person* person2 = new Person("Nimisha");
    Student* student2 = new Student("bob", 10);

    person2->introduce();
    student2->introduce();
    student2->study();

    delete person2;
    delete student2;

    return 0;
}

single inheritance with dynamic binding
=============================================================
one two dynamic/static objects of the Derived class 
pointed by base class pointer
and call all behaviours using Base class pointer 

Override Base Class behaviors to derived class.
Define constructors and destructors for all the classes 
Define all the fields as dynamic fields in each class 

If you use string, use c-string (don't use string class)
        ie. dynamic c-string [dynamic char array]
`Animal and Dog`
- `Base Class:` `Animal`  
  - Fields: `species`  
  - Pure Virtual Behaviors: `makeSound()`, `move()`  
- `Derived Class:` `Dog`  
  - Fields: `breed`

//task3

#include <iostream>
#include <cstring>

using namespace std;

class Animal {
public:
    Animal(const char* species) {
        this->species = new char[strlen(species) + 1];
        strcpy(this->species, species);
        cout << "Animal constructor called.." << endl;
    }

    virtual ~Animal() {
        cout << "Animal destructor called.." << endl;
        delete[] species;
    }

    virtual void makeSound() = 0;
    virtual void move() = 0;

protected:
    char* species;
};

class Dog : public Animal {
public:
    Dog(const char* species, const char* breed) : Animal(species) {
        this->breed = new char[strlen(breed) + 1];
        strcpy(this->breed, breed);
        cout << "Dog constructor called.." << endl;
    }

    ~Dog() {
        cout << "Dog destructor: " << endl;
        delete[] breed;
    }

    void makeSound() override {
        cout << "Woof!" << endl;
    }

    void move() override {
        cout << "Dog is running" << endl;
    }

private:
    char* breed;
};

int main() {
    Animal* an1 = new Dog("canine", "golden retriever");
    Animal* an2 = new Dog("canine", "pomerian");

    cout << "=== Animal 1 ===" << endl;
    an1->makeSound();
    an1->move();

    cout << "=== Animal 2 ===" << endl;
    an2->makeSound();
    an2->move();

    delete an1;
    delete an2;

    return 0;
}
